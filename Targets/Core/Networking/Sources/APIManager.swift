//
//  APIManager.swift
//  Network
//
//  Created by ìµœë¯¼í•œ on 2022/12/01.
//  Copyright Â© 2022 com.minan. All rights reserved.
//

import Foundation
import Combine

public protocol APIManagerInterface {
  func perform<ðŸ‘»: Decodable>(_ request: RequestProtocol, type: ðŸ‘».Type) -> AnyPublisher<ðŸ‘», Error>
}

public class APIManager: APIManagerInterface {
  
  private let urlSession: URLSession
  
  public init(urlSession: URLSession = URLSession.shared) {
    self.urlSession = urlSession
  }
  
  public func perform<ðŸ‘»: Decodable>(_ request: RequestProtocol, type: ðŸ‘».Type) -> AnyPublisher<ðŸ‘», Error> {
    guard let request = try? request.createURLRequest() else {
      return Fail(error: URLError(.badURL)).eraseToAnyPublisher()
    }
    
    return urlSession.dataTaskPublisher(for: request)
      .tryMap { data, res in
        try JSONDecoder().decode(ðŸ‘».self, from: data)
      }
      .eraseToAnyPublisher()
  }
}
